Description: Fix compatibility for sphinx 2.4+
Author: Michal Arbet
Forwarded: not-needed
Last-Update: 2020-04-24

diff --git a/oslosphinx/__init__.py b/oslosphinx/__init__.py
index 58692ab..0b6d7b1 100644
--- a/oslosphinx/__init__.py
+++ b/oslosphinx/__init__.py
@@ -18,6 +18,9 @@ import six
 from six.moves.urllib import parse
 import string
 import subprocess
+from sphinx.util import logging
+
+LOG = logging.getLogger(__name__)
 
 
 CGIT_BASE = 'http://git.openstack.org/cgit/'
@@ -57,8 +60,12 @@ def _get_other_versions(app):
             git_cmd, stdout=subprocess.PIPE).communicate()[0]
         raw_version_list = raw_version_list.decode("utf8")
     except OSError:
-        app.warn('Cannot get tags from git repository. '
-                 'Not setting "other_versions".')
+        try:
+            app.warn('Cannot get tags from git repository. '
+                     'Not setting "other_versions".')
+        except AttributeError:
+            LOG.warning('Cannot get tags from git repository. '
+                     'Not setting "other_versions".')
         raw_version_list = u''
 
     # grab last five that start with a number and reverse the order
@@ -73,7 +80,10 @@ def _get_other_versions(app):
 
 def builder_inited(app):
     theme_dir = os.path.join(os.sep, 'usr', 'share', 'oslosphinx')
-    app.info('Using openstack theme from %s' % theme_dir)
+    try:
+        app.info('Using openstack theme from %s' % theme_dir)
+    except AttributeError:
+        LOG.info('Using openstack theme from %s' % theme_dir)
     # Insert our theme directory at the front of the search path and
     # force the theme setting to use the one in the package unless
     # another openstack theme is already selected. This is done here,
diff --git a/oslosphinx/check_blueprints.py b/oslosphinx/check_blueprints.py
index e241edc..930f6af 100644
--- a/oslosphinx/check_blueprints.py
+++ b/oslosphinx/check_blueprints.py
@@ -15,6 +15,9 @@
 """
 
 import requests
+from sphinx.util import logging
+
+LOG = logging.getLogger(__name__)
 
 
 class BlueprintChecker(object):
@@ -74,11 +77,17 @@ class BlueprintChecker(object):
 
     def blueprint_exists(self, project_name, bp_name):
         """Return boolean indicating whether the blueprint exists."""
-        self.app.info('Checking for %s in %s' % (bp_name, project_name))
+        try:
+            self.app.info('Checking for %s in %s' % (bp_name, project_name))
+        except AttributeError:
+            LOG.info('Checking for %s in %s' % (bp_name, project_name))
         url = self.BP_URL_TEMPLATE % (project_name, bp_name)
         response = requests.get(url)
         if response.status_code == 200:
-            self.app.info('Found %s in %s' % (bp_name, project_name))
+            try:
+                self.app.info('Found %s in %s' % (bp_name, project_name))
+            except AttributeError:
+                LOG.info('Found %s in %s' % (bp_name, project_name))
             return True
         return False
 
@@ -87,7 +96,10 @@ class BlueprintChecker(object):
         if bp_name in self._good_bps:
             return True
         self._load_project_settings()
-        self.app.info('')  # emit newline
+        try:
+            self.app.info('')  # emit newline
+        except AttributeError:
+            LOG.info('')  # emit newline
         candidate_project, dash, bp_name_to_find = bp_name.partition('-')
         if candidate_project in self.project_names:
             # First check the shortened name of the blueprint in the project.
@@ -96,33 +108,56 @@ class BlueprintChecker(object):
             # Then check the full name of the blueprint in the project.
             if self.blueprint_exists(candidate_project, bp_name):
                 return
-            self.app.info(
-                ('Blueprint name %r looks like it starts with a project '
-                 'name, but %r was not found in project %r') %
-                (bp_name, bp_name_to_find, candidate_project)
-            )
+            try:
+                self.app.info(
+                    ('Blueprint name %r looks like it starts with a project '
+                     'name, but %r was not found in project %r') %
+                    (bp_name, bp_name_to_find, candidate_project)
+                )
+            except AttributeError:
+                LOG.info(
+                    ('Blueprint name %r looks like it starts with a project '
+                     'name, but %r was not found in project %r') %
+                    (bp_name, bp_name_to_find, candidate_project)
+                )
         else:
-            self.app.info(
-                'Blueprint checking is faster if the file names '
-                'start with the launchpad project name.'
-            )
+            try:
+                self.app.info(
+                    'Blueprint checking is faster if the file names '
+                    'start with the launchpad project name.'
+                )
+            except AttributeError:
+                LOG.info(
+                    'Blueprint checking is faster if the file names '
+                    'start with the launchpad project name.'
+                )
         for project_name in self.project_names:
             if self.blueprint_exists(project_name, bp_name):
                 self._good_bps.add(bp_name)
                 break
         else:
-            self.app.warn(
-                'Could not find a blueprint called %r in %s'
-                % (bp_name, self._warn_search),
-                location=(bp_name, 0),
-            )
+            try:
+                self.app.warn(
+                    'Could not find a blueprint called %r in %s'
+                    % (bp_name, self._warn_search),
+                    location=(bp_name, 0),
+                )
+            except AttributeError:
+                LOG.warning(
+                    'Could not find a blueprint called %r in %s'
+                    % (bp_name, self._warn_search),
+                    location=(bp_name, 0),
+                )
             raise ValueError(
                 'Document %s does not match any blueprint name in %s'
                 % (bp_name, self._warn_search))
 
 
 def setup(app):
-    app.info('Initializing %s' % __name__)
+    try:
+        app.info('Initializing %s' % __name__)
+    except AttributeError:
+        LOG.info('Initializing %s' % __name__)
     checker = BlueprintChecker(app)
     app.connect('doctree-resolved', checker.doctree_resolved)
     app.add_config_value('check_blueprints_project_group', 'openstack', 'env')
